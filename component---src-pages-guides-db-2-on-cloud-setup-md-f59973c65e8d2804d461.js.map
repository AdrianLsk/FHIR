{"version":3,"sources":["webpack:///./src/pages/guides/DB2OnCloudSetup.md","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_7__","_extends","mdxType","id","parentName","href","isMDXComponent","components_PageHeader","_cx","children","title","_ref$tabs","tabs","shouldHideHeader","core_browser_esm","className","cx","PageHeader_module","length","text","components_EditLink","relativePagePath","repositoryProp","repository","_1805934869","data","site","siteMetadata","_ref2","baseUrl","subDirectory","row","EditLink_module","components_PageTabs","render","_this$props","this","slug","currentTab","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","key","PageTabs_module","gatsby_browser_entry","to","tabsContainer","list","React","Component","__webpack_exports__","pageContext","location","_pageContext$frontmat","frontmatter","scrollDirection","useScrollDirection","pathPrefix","_2216853253","pathname","Layout","homepage","label","Main","padded","NextPrevious","es"],"mappings":"4bAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,sIACFC,CAAAH,EAAA,gBACD,OAAOI,OAAAC,EAAA,EAAAD,CAACP,EAADS,EAAA,GAAeV,EAAiBM,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAG5EH,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,6BADR,6BAGAJ,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,yBADR,yBAGAJ,OAAAC,EAAA,EAAAD,CAAA,6CAAwCA,OAAAC,EAAA,EAAAD,CAAA,IAAAE,EAAA,CAAGG,WAAW,KAAQ,CAC1DC,KAAQ,2BAD4B,0BAAxC,KAGAN,OAAAC,EAAA,EAAAD,CAAA,kBAAaA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,mBAAb,KACAL,OAAAC,EAAA,EAAAD,CAAA,wCACAA,OAAAC,EAAA,EAAAD,CAAA,+FACAA,OAAAC,EAAA,EAAAD,CAAA,0NACAA,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,sBADR,sBAGAJ,OAAAC,EAAA,EAAAD,CAAA,wQACAA,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,uCADR,uCAGAJ,OAAAC,EAAA,EAAAD,CAAA,6FAAwFA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,uBAAxF,iLAAyUL,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,sBAAzU,8BACAL,OAAAC,EAAA,EAAAD,CAAA,qKACAA,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAE,EAAA,CAAMG,WAAW,OAAU,IAA3B,ogCAeLL,OAAAC,EAAA,EAAAD,CAAA,kFACAA,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,+BADR,+BAGAJ,OAAAC,EAAA,EAAAD,CAAA,iYACAA,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAE,EAAA,CAAMG,WAAW,OAAU,IAA3B,+LAGLL,OAAAC,EAAA,EAAAD,CAAA,oEACAA,OAAAC,EAAA,EAAAD,CAAA,0CAAqCA,OAAAC,EAAA,EAAAD,CAAA,IAAAE,EAAA,CAAGG,WAAW,KAAQ,CACvDC,KAAQ,yCADyB,wCAArC,KAGAN,OAAAC,EAAA,EAAAD,CAAA,oGAA+FA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,eAC/FL,OAAAC,EAAA,EAAAD,CAAA,gIAA2HA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,iBAA3H,KACAL,OAAAC,EAAA,EAAAD,CAAA,iGAA4FA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,sBAA5F,iBACAL,OAAAC,EAAA,EAAAD,CAAA,uUACAA,OAAAC,EAAA,EAAAD,CAAA,gHACAA,OAAAC,EAAA,EAAAD,CAAA,kHACAA,OAAAC,EAAA,EAAAD,CAAA,wJACAA,OAAAC,EAAA,EAAAD,CAAA,4CACAA,OAAAC,EAAA,EAAAD,CAAA,kEACAA,OAAAC,EAAA,EAAAD,CAAA,8CACAA,OAAAC,EAAA,EAAAD,CAAA,4GAEAA,OAAAC,EAAA,EAAAD,CAAA,wDAAmDA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,aAAnD,YAAqHL,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,aAArH,uCACAL,OAAAC,EAAA,EAAAD,CAAA,iHACAA,OAAAC,EAAA,EAAAD,CAAA,0BACAA,OAAAC,EAAA,EAAAD,CAAA,2HACAA,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,0BADR,0BAGAJ,OAAAC,EAAA,EAAAD,CAAA,wLACAA,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAE,EAAA,CAAMG,WAAW,OAAU,IAA3B,+dAOLL,OAAAC,EAAA,EAAAD,CAAA,iDAC2BA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,KAD3B,wZAGAL,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,iDADR,iDAGAJ,OAAAC,EAAA,EAAAD,CAAA,2LACAA,OAAAC,EAAA,EAAAD,CAAA,iSACAA,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAE,EAAA,CAAMG,WAAW,OAAU,IAA3B,6wBAgBLL,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,+BADR,+BAGAJ,OAAAC,EAAA,EAAAD,CAAA,yPACAA,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAE,EAAA,CAAMG,WAAW,OAAU,IAA3B,45BAsBLL,OAAAC,EAAA,EAAAD,CAAA,qHACAA,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,mBADR,mBAGAJ,OAAAC,EAAA,EAAAD,CAAA,mFAA8EA,OAAAC,EAAA,EAAAD,CAAA,MAAIK,WAAW,KAAf,oGAC9EL,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,mBADR,mBAGAJ,OAAAC,EAAA,EAAAD,CAAA,kHAKJL,EAAWY,gBAAiB,wVCjK5BC,ECQmB,SAAAZ,GAAA,IAAAa,EAAGC,EAAHd,EAAAc,SAAaC,EAAbf,EAAAe,MAAAC,EAAAhB,EAAAiB,KAAoBA,OAApB,IAAAD,EAAA,GAAAA,EAA+BE,EAA/BlB,EAAAkB,iBAAA,OACjBd,OAAAe,EAAA,EAAAf,CAAA,OACEgB,UAAWC,KAAER,EAAA,GAAAA,EAAAS,EAAA,YAAAA,EAAA,WAAAT,EAAAS,EAAA,kBAESL,EAFTM,OAAAV,EAAAS,EAAA,mBAAAJ,EAAAL,KAMbT,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAU,YACbhB,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAU,WACbhB,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAU,iBACbhB,OAAAe,EAAA,EAAAf,CAAA,MAAII,GAAJ,aAAoBY,UAAWI,QAVvCT,MADiBD,sBCRnBW,ECIiB,SAAAzB,GAAsD,IAAnD0B,EAAmD1B,EAAnD0B,iBAA8BC,EAAqB3B,EAAjC4B,WAGhBA,EAHiDC,EAAAC,KAAAC,KAAAC,aAAAJ,WAAAK,EAkBnCN,GAlBmCC,EAkB7DM,EAlB6DD,EAAAC,QAoB/DxB,EAAUwB,EAAN,eApB2DD,EAAAE,aAoB3D,aAAVT,EAEA,OAAOQ,EACL9B,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAS,WAAagB,OACzBhC,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAU,WACbhB,OAAAe,EAAA,EAAAf,CAAA,KAAGgB,UAAHiB,EAAA,KAAoB3B,KAAMA,GAHlB,8BAAd,oCC1BF4B,kLCkBEC,kBAAS,IAAAC,EACgBC,KADhBvC,MACCe,EADDuB,EAAAvB,KACOyB,EADPF,EAAAE,KAEDC,EAAaD,uCAAnB,GAKME,EAAW3B,EAAA4B,IAAS,SAAAC,GAAO,IAAAjC,EACzBkC,EAAeC,IAAOF,EAAM,CAAEG,OAAO,IACrCC,EAAWH,IAAjBJ,EACMjC,EAAOgC,YAAbK,GACA,OACE3C,OAAAe,EAAA,EAAAf,CAAA,MAAI+C,IAAJL,EAAc1B,UAAWC,KAAER,EAAA,GAAAA,EAAAuC,EAAA,cAAAF,EAAArC,GAAAuC,EAAA,WACzBhD,OAAAe,EAAA,EAAAf,CAAAiD,EAAA,MAAMjC,UAANgC,EAAA,KAAuBE,GAAE,GAAK5C,GAFlCoC,MASF,OACE1C,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAWmC,iBACdnD,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAU,YACbhB,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAU,WACbhB,OAAAe,EAAA,EAAAf,CAAA,OAAKgB,UAAU,mCACbhB,OAAAe,EAAA,EAAAf,CAAA,WACEA,OAAAe,EAAA,EAAAf,CAAA,MAAIgB,UAAWoC,QAN3BZ,YA1BkCa,IAAMC,oBCsD5CC,EAAA,EAtDgB,SAAA3D,GAAyC,IAAtC4D,EAAsC5D,EAAtC4D,YAAa9C,EAAyBd,EAAzBc,SAAU+C,EAAe7D,EAAf6D,SAAeC,EACRF,EADQG,YAC/CA,OAD+C,IAAAD,EAAA,GAAAA,EAC7BpC,EAAqBkC,EADQlC,iBAE/CT,EAAgB8C,EAF+B9C,KAEzCF,EAAUgD,EAF+BhD,MAGjDiD,EAAkBC,cAClB/C,IAAmBD,GAJ8B,SAIpB+C,EAIzBE,EAR6CC,EAAArC,KAAAC,KAAAmC,WAkBjDxB,EAAOwB,EACTL,qBADmB,IAEnBA,EAFJO,SASMzB,EAJJ1B,EACOyB,2BAAgCM,IAAQ/B,EAAD,GAAU,CAAEgC,OAAO,IADtD,GAKb,OACE7C,OAAAe,EAAA,EAAAf,CAAAiE,EAAA,GAAQnD,iBAARA,EAA4CoD,UAAU,GACpDlE,OAAAe,EAAA,EAAAf,CAAAQ,EAAA,CACEM,iBADFA,EAEEH,MAFFA,EAGEwD,MAHF,QAIEtD,KAAMA,GAELA,GAAQb,OAAAe,EAAA,EAAAf,CAAAkC,EAAA,CAAUI,KAAVA,EAAsBzB,KAAtBA,EAAkC0B,WAAYA,KAEzDvC,OAAAe,EAAA,EAAAf,CAAAoE,EAAA,GAAMC,QAAM,GAAZ3D,EAEEV,OAAAe,EAAA,EAAAf,CAAAqB,EAAA,CAAUC,iBAAkBA,KAE9BtB,OAAAe,EAAA,EAAAf,CAAAsE,EAAA,GACEd,YADFA,EAEEC,SAFFA,EAGEnB,KAHFA,EAIEzB,KAJFA,EAKE0B,WAAYA,IAEdvC,OAAAe,EAAA,EAAAf,CAAAuE,EAAA,EArBJ","file":"component---src-pages-guides-db-2-on-cloud-setup-md-f59973c65e8d2804d461.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/paulbastide/git/wffh/tmp-fhir3/FHIR/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"using-db2-for-persistence\"\n    }}>{`Using DB2 For Persistence`}</h2>\n    <h3 {...{\n      \"id\": \"create-a-db2-instance\"\n    }}>{`Create a DB2 Instance`}</h3>\n    <p>{`Log in to your IBM Cloud account `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/\"\n      }}>{`https://cloud.ibm.com/`}</a>{`.`}</p>\n    <p>{`Click `}<inlineCode parentName=\"p\">{`Create resource`}</inlineCode>{`.`}</p>\n    <p>{`Choose DB2 (transactional).`}</p>\n    <p>{`Select the instance size. Flex is the best choice for a basic production workload.`}</p>\n    <p>{`You can use the Lite plan for development or evaluation workloads. This plan has a limit of 5 concurrent connections, so the FHIR server connection-pool will need to be sized accordingly to avoid failures.`}</p>\n    <h3 {...{\n      \"id\": \"scale-the-instance\"\n    }}>{`Scale the Instance`}</h3>\n    <p>{`If you chose Flex, you may want to scale the instance after it has been created (e.g. 4 cores, 16GB). The instance can be scaled more than once, so it doesn’t matter if you don’t get the sizing right first time. Scaling the instance requires a reboot.`}</p>\n    <h3 {...{\n      \"id\": \"create-the-administrator-credential\"\n    }}>{`Create the Administrator Credential`}</h3>\n    <p>{`The administrator will be BLUADMIN but you need to create a credential. Open the `}<inlineCode parentName=\"p\">{`Service credentials`}</inlineCode>{` panel for the DB2 instance resource you just created. If you don’t yet have any service credentials in the table at the bottom of the page, create a new one by clicking the `}<inlineCode parentName=\"p\">{`New credential (+)`}</inlineCode>{` button. Any name will do.`}</p>\n    <p>{`To access the credential, select View Credentials for the entry you just created. The result will be a block of JSON full of secrets (blanked out here):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  \"hostname\": \"dashdb-txn-flex-.***********.services.dal.bluemix.net\",\n  \"password\": \"bluadmin-password-very-secret\",\n  \"https_url\": \"https://dashdb-txn-flex-************.services.dal.bluemix.net:8443\",\n  \"port\": 50000,\n  \"ssldsn\": \"DATABASE=BLUDB;HOSTNAME=dashdb-txn-flex-************.services.dal.bluemix.net;PORT=50001;PROTOCOL=TCPIP;UID=bluadmin;PWD=bluadmin-password-very-secret;Security=SSL;\",\n  \"host\": \"dashdb-txn-flex-************.services.dal.bluemix.net\",\n  \"jdbcurl\": \"jdbc:db2://dashdb-txn-flex-************.services.dal.bluemix.net:50000/BLUDB\",\n  \"uri\": \"db2://bluadmin:bluadmin-password-very-secret@dashdb-txn-flex-************.services.dal.bluemix.net:50000/BLUDB\",\n  \"db\": \"BLUDB\",\n  \"dsn\": \"DATABASE=BLUDB;HOSTNAME=dashdb-txn-flex-************.services.dal.bluemix.net;PORT=50000;PROTOCOL=TCPIP;UID=bluadmin;PWD=bluadmin-password-very-secret;\",\n  \"username\": \"bluadmin\",\n  \"ssljdbcurl\": \"jdbc:db2://dashdb-txn-flex-************.services.dal.bluemix.net:50001/BLUDB:sslConnection=true;\"\n}\n`}</code></pre>\n    <p>{`These properties will be needed to deploy and manage the FHIR schema.`}</p>\n    <h3 {...{\n      \"id\": \"fhirserver-user-and-api-key\"\n    }}>{`FHIRSERVER User and API Key`}</h3>\n    <p>{`The BLUADMIN user is used to deploy the initial schema objects (tables, indexes, stored procedures etc). Following the least-privilege principle, the FHIR server itself does not use BLUADMIN. The FHIR server uses an API Key associated with an IAM Service Id. This Service Id is mapped to a DB2 user which is granted explicit privileges to the tables and stored procedures.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    API KEY -------> Service Id -------> DB2 User ------> SELECT/UPDATE/EXECUTE etc Privileges\n (FHIR Config)          (IAM)              (DB2)                          (DB2)\n`}</code></pre>\n    <p>{`On the IBM Cloud console, select Manage / Access (IAM).`}</p>\n    <p>{`Select the Service IDs panel: `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/iam/serviceids\"\n      }}>{`https://cloud.ibm.com/iam/serviceids`}</a>{`.`}</p>\n    <p>{`Wait for the table to populate. If you do not yet have an appropriate service id, click `}<inlineCode parentName=\"p\">{`Create (+)`}</inlineCode></p>\n    <p>{`Specify a meaningful name and description. After creating the Service ID, record the ID value which will start with `}<inlineCode parentName=\"p\">{`ServiceId-...`}</inlineCode>{`.`}</p>\n    <p>{`Select the API keys tab on the Service ID management page. Note that this is not the `}<inlineCode parentName=\"p\">{`IBM Cloud API keys`}</inlineCode>{` on the left.`}</p>\n    <p>{`Select Create (+) to add a new API key. Copy or download the key. If you mess up and don’t retain a copy, don’t panic - you can simply delete the API key and create a new one. API keys are designed to support rolling so you can add as many as you need and delete others if you need to revoke access for any reason.`}</p>\n    <p>{`The API key will be used in the database configuration section of the fhir-server-config.json file.`}</p>\n    <p>{`Before the API key can be used, we need to create a DB2 user and associate it with the new ServiceId.`}</p>\n    <p>{`Navigate to the IBM Cloud DB2 resource page for your instance and select Manage. Click Open Console to access the IBM Db2 on Cloud console.`}</p>\n    <p>{`Select SETTINGS > Manage Users.`}</p>\n    <p>{`Click Add. This opens a panel on the right-hand side.`}</p>\n    <p>{`Select Add IBMid User at the top.`}</p>\n    <p>{`User ID: FHIRSERVER\nIBMid: paste the ServiceId-… value from the Service Id created previously.`}</p>\n    <p>{`The page forces the value to lower-case, so `}<inlineCode parentName=\"p\">{`ServiceId`}</inlineCode>{` becomes `}<inlineCode parentName=\"p\">{`serviceid`}</inlineCode>{`. Don’t be alarmed, it still works.`}</p>\n    <p>{`Do NOT select Administrator. We want the FHIRSERVER user to be a plain user with minimal privileges.`}</p>\n    <p>{`Click Create.`}</p>\n    <p>{`You should now be able to connect to the database as the FHIRSERVER user using only the API key created above.`}</p>\n    <h3 {...{\n      \"id\": \"testing-the-connection\"\n    }}>{`Testing the Connection`}</h3>\n    <p>{`The DB2 driver jar contains a main which can be executed to test the connection - very convenient for checking the API-key/Service-Id/DB2-User-Id configuration is correct.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`java -cp /path/to/db2jcc4.jar com.ibm.db2.jcc.DB2Jcc  -url \"jdbc:db2://<DB2-HOSTNAME>:50001/BLUDB:apiKey=<API-KEY>;securityMechanism=15;sslConnection=true;sslTrustStoreLocation=/path/to/truststore.jks;sslTrustStorePassword=<TRUSTSTORE-PASSWORD>;\"\n\n\n        <DB-HOSTNAME>: the hostname of your DB2 service from the Service Credentials page\n            <API-KEY>: the API key value created in the previous section\n<TRUSTSTORE-PASSWORD>: the password for your truststore\n`}</code></pre>\n    <p>{`Notes:\n1. Don’t forget the trailing `}<inlineCode parentName=\"p\">{`;`}</inlineCode>{` in the URL. Some of the documented examples don’t include it, but it is required in order for the connection to work, although this may be fixed in a future driver release. This only affects this test URL, not the actual FHIR server configuration.\n2. When using an API Key, no username needs to be provided. This is because the API Key maps to a ServiceId, and that ServiceId is mapped to the DB2 user.`}</p>\n    <h3 {...{\n      \"id\": \"configuring-a-liberty-datasource-with-api-key\"\n    }}>{`Configuring a Liberty Datasource with API Key`}</h3>\n    <p>{`The FHIR export feature utilizes Java Batch (JSR-352) provided by the batch-1.0 feature in Liberty Profile. The JPA persistence layer can be configured to use DB2 as follows:`}</p>\n    <p>{`Create a DB2 user (e.g. FHIRBATCH) and associate it with a ServiceId (no need to create an Administration user, a simple user has sufficient privileges). Using a valid API-KEY for the given ServiceId, configure a new datasource and the Java Batch persistence layer as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    <dataSource id=\"fhirbatchDS\" jndiName=\"jdbc/fhirbatchDB\">\n        <jdbcDriver libraryRef=\"fhirSharedLib\"/>\n        <properties.db2.jcc\n            serverName=\"dashdb-txn-flex-************.services.dal.bluemix.net\"\n            portNumber=\"50001\"\n            apiKey=\"<API-KEY>\"\n            securityMechanism=\"15\"\n            pluginName=\"IBMIAMauth\"\n            databaseName=\"BLUDB\"\n            currentSchema=\"JBATCH\"\n            driverType=\"4\" sslConnection=\"true\" sslTrustStoreLocation=\"resources/security/dbTruststore.jks\" sslTrustStorePassword=\"<TRUSTSTORE-PASSWORD>\"/>\n    </dataSource>\n    \n    <batchPersistence jobStoreRef=\"BatchDatabaseStore\" />\n    <databaseStore id=\"BatchDatabaseStore\" dataSourceRef=\"fhirbatchDS\" schema=\"JBATCH\" tablePrefix=\"\" />\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"configuring-fhir-datasource\"\n    }}>{`Configuring FHIR Datasource`}</h3>\n    <p>{`The FHIR server uses a proxy datasource mechanism, allowing new datasources to be added at runtime without requiring a (Liberty Profile) server restart. To configure a FHIR tenant datasource using an API-KEY, use the following template:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`        \"persistence\": {\n            \"datasources\": {\n                \"default\": {\n                    \"tenantKey\": \"\",\n                    \"type\": \"db2\",\n                    \"connectionProperties\": {\n                        \"serverName\": \"dashdb-txn-flex-************.services.dal.bluemix.net\",\n                        \"portNumber\": 50001,\n                        \"databaseName\": \"BLUDB\",\n                        \"apiKey\": \"<API-KEY>\",\n                        \"securityMechanism\": 15,\n                        \"pluginName\": \"IBMIAMauth\",\n                        \"currentSchema\": \"FHIRDATA\",\n                        \"driverType\": 4,\n                        \"sslConnection\": true,\n                        \"sslTrustStoreLocation\": \"resources/security/dbTruststore.jks\",\n                        \"sslTrustStorePassword\": \"change-password\"\n                    }\n                }\n            }\n        }\n`}</code></pre>\n    <p>{`Note that no username properties are given, because the authentication module only requires the API-KEY.`}</p>\n    <h3 {...{\n      \"id\": \"ssl-certificate\"\n    }}>{`SSL Certificate`}</h3>\n    <p>{`The DB2 certificate should be added to the Liberty Profile truststore. `}<em parentName=\"p\">{`Be sure to use the same Java runtime that Liberty Profile uses when manipulating any keystores.`}</em></p>\n    <h3 {...{\n      \"id\": \"encrypt-secrets\"\n    }}>{`Encrypt Secrets`}</h3>\n    <p>{`All passwords including apiKey values should be encrypted using the Liberty Profile securityUtility.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n  pageHeader,\n  text,\n  pageHeaderSticky,\n  pageHeaderShifted,\n} from './PageHeader.module.scss';\n\nconst PageHeader = ({ children, title, tabs = [], shouldHideHeader }) => (\n  <div\n    className={cx({\n      [pageHeader]: pageHeader,\n      [pageHeaderSticky]: tabs.length,\n      [pageHeaderShifted]: shouldHideHeader,\n    })}\n  >\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n    {children}\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Pass in the children that will be rendered within the PageHeader\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { WebsiteBackToTopBtn } from '@carbon/addons-website';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport { useScrollDirection } from '../util/hooks';\n\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath } = pageContext;\n  const { tabs, title } = frontmatter;\n  const scrollDirection = useScrollDirection();\n  const shouldHideHeader = !!tabs && scrollDirection === 'down';\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout shouldHideHeader={shouldHideHeader} homepage={false}>\n      <PageHeader\n        shouldHideHeader={shouldHideHeader}\n        title={title}\n        label=\"label\"\n        tabs={tabs}\n      >\n        {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      </PageHeader>\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <WebsiteBackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}